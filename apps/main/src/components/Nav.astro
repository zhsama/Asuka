---
import { env } from "@/config/env";
import ThemeSwitcher from "@/React/ThemeSwitcher";

interface NavItem {
  label: string;
  href: string;
  external?: boolean;
}

const navItems: NavItem[] = [
  {
    label: "Home",
    href: "#home",
  },
  {
    label: "Projects",
    href: "#projects",
  },
  {
    label: "Contact",
    href: "#contact",
  },
  {
    label: "Blog",
    href: env.BLOG_URL,
    external: true,
  },
];
---

<div class="flex justify-center w-full">
  <!-- 主题切换器 - 左侧 -->
  <div class="fixed right-8 hidden md:block top-6 p-1.5 z-101">
    <ThemeSwitcher client:load />
  </div>
  <nav
    id="main-nav"
    class="fixed left-1/2 -translate-x-1/2 z-[100] bg-[var(--background)] border border-transparent backdrop-blur-xl transition-all duration-500 ease-in-out md:top-6 md:bottom-auto bottom-0 w-[60%] cyberpunk-nav"
  >
    <div class="container mx-auto flex justify-center items-center p-3 relative">
      <ul
        class="flex w-full justify-between md:space-x-6 md:justify-center md:gap-12"
      >
        {
          navItems.map((item) => (
            <li class="flex-1 md:flex-none">
              <a
                href={item.href}
                target={item.external ? "_blank" : undefined}
                rel={item.external ? "noopener noreferrer" : undefined}
                class="nav-link flex flex-col items-center gap-1 text-white transition-all duration-300 text-xs md:text-base relative group font-medium"
              >
                <!-- 霓虹指示器 -->
                <div class="nav-indicator absolute -left-8 top-1/2 -translate-y-1/2 w-3 h-3 rounded-full transition-all duration-300 scale-0" />

                <!-- 悬停效果背景 -->
                <div class="absolute inset-0 bg-gradient-to-r from-transparent via-[var(--primary)] to-transparent opacity-0 group-hover:opacity-20 transition-opacity duration-300 rounded-lg"></div>

                <!-- 文本和外链图标的容器 -->
                <div class="flex items-center gap-1 relative z-10">
                  <span class="hidden md:inline-block nav-text">{item.label}</span>
                  <span class="md:hidden nav-text">{item.label}</span>

                  <!-- 外部链接图标 -->
                  {item.external && (
                    <svg
                      class="w-3 h-3 opacity-60 ml-1"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"></path>
                      <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z"></path>
                    </svg>
                  )}
                </div>
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </nav>
</div>

<script>
  const nav = document.getElementById("main-nav");
  const maxScroll = 1000;
  let rafId: number | null = null;

  function updateNav() {
    if (window.scrollY > 0) {
      nav?.classList.add("scrolling");

      const scrollProgress = Math.min(window.scrollY / maxScroll, 1);
      const easeProgress = 1 - Math.pow(1 - scrollProgress, 4);

      const minWidth = 528;
      const maxWidth = window.innerWidth * 0.6;
      const currentWidth = maxWidth - (maxWidth - minWidth) * easeProgress;

      if (window.innerWidth >= 768) {
        nav?.style.setProperty("width", `${currentWidth}px`);
      }
    } else {
      nav?.classList.remove("scrolling");
      nav?.style.setProperty("width", "60%");
    }
    rafId = null;
  }

  window.addEventListener(
    "scroll",
    () => {
      if (!rafId) {
        rafId = requestAnimationFrame(updateNav);
      }
    },
    { passive: true }
  );

  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
      e.preventDefault();
      const target = e.currentTarget as HTMLAnchorElement;
      const targetId = target.getAttribute("href")?.substring(1) || "";
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        targetElement.scrollIntoView({
          behavior: "smooth",
        });
      }
    });
  });

  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section[id]");
    const navLinks = document.querySelectorAll("nav a[href^='#']");
    const observerOptions = {
      threshold: 0.3,
      rootMargin: "-50px 0px -50px 0px"
    };

    const observerCallback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry: IntersectionObserverEntry) => {
        const id = entry.target.getAttribute("id");

        if (entry.isIntersecting) {
          // 移除所有链接的active状态
          navLinks.forEach((link) => {
            link.classList.remove("active");
            const indicator = link.querySelector(".nav-indicator");
            if (indicator && indicator instanceof HTMLElement) {
              indicator.style.transform = "translateY(-50%) scale(0)";
              indicator.style.opacity = "0";
            }
          });

          // 为当前section的链接添加active状态
          const activeLink = document.querySelector(`nav a[href="#${id}"]`);
          if (activeLink) {
            activeLink.classList.add("active");
            const indicator = activeLink.querySelector(".nav-indicator");
            if (indicator && indicator instanceof HTMLElement) {
              indicator.style.transform = "translateY(-50%) scale(1)";
              indicator.style.opacity = "1";
            }
          }
        }
      });
    };

    const observer = new IntersectionObserver(
      observerCallback,
      observerOptions
    );
    sections.forEach((section) => observer.observe(section));

    // 页面加载时检查当前位置
    const checkInitialSection = () => {
      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      const sections = Array.from(document.querySelectorAll("section[id]"));

      let currentSection = sections[0]; // 默认为第一个section

      // 检查是否在页面底部（接近contact section）
      if (scrollY + windowHeight >= documentHeight - 100) {
        currentSection = sections[sections.length - 1]; // 使用最后一个section (contact)
      } else {
        sections.forEach((section) => {
          const rect = section.getBoundingClientRect();
          const sectionTop = rect.top + scrollY;
          const sectionHeight = rect.height;

          // 更宽松的检测条件
          if (scrollY >= sectionTop - 200 && scrollY < sectionTop + sectionHeight - 100) {
            currentSection = section;
          }
        });
      }

      if (currentSection) {
        const id = currentSection.getAttribute("id");

        // 移除所有active状态
        navLinks.forEach((link) => {
          link.classList.remove("active");
          const indicator = link.querySelector(".nav-indicator");
          if (indicator && indicator instanceof HTMLElement) {
            indicator.style.transform = "translateY(-50%) scale(0)";
            indicator.style.opacity = "0";
          }
        });

        // 添加当前section的active状态
        const activeLink = document.querySelector(`nav a[href="#${id}"]`);
        if (activeLink) {
          activeLink.classList.add("active");
          const indicator = activeLink.querySelector(".nav-indicator");
          if (indicator && indicator instanceof HTMLElement) {
            indicator.style.transform = "translateY(-50%) scale(1)";
            indicator.style.opacity = "1";
          }
        }
      }
    };

    // 初始检查
    checkInitialSection();

    // 滚动时也检查（作为IntersectionObserver的补充）
    window.addEventListener("scroll", () => {
      setTimeout(checkInitialSection, 50);
    }, { passive: true });
  });
</script>

<style>
  .cyberpunk-nav {
    background: transparent;
    backdrop-filter: none;
    transition:
      background-color 0.3s ease,
      backdrop-filter 0.3s ease,
      border-radius 0.3s ease,
      border-color 0.3s ease,
      box-shadow 0.3s ease;
  }

  nav.scrolling {
    background: rgba(5, 5, 15, 0.4);
    backdrop-filter: blur(15px);
    border-radius: 9999px;
    border-color: var(--primary);
    box-shadow:
      0 0 40px rgba(252, 238, 9, 0.4),
      inset 0 0 30px rgba(252, 238, 9, 0.08),
      0 0 80px rgba(0, 245, 255, 0.15);
  }

  .nav-indicator {
    background: var(--primary);
    box-shadow:
      0 0 15px var(--primary),
      0 0 30px var(--primary),
      0 0 45px var(--primary);
    filter: blur(1px);
  }

  .nav-indicator::before {
    content: "";
    position: absolute;
    inset: -3px;
    background: var(--primary);
    border-radius: 50%;
    opacity: 0.6;
    filter: blur(3px);
  }

  nav a.active .nav-indicator {
    transform: translateY(-50%) scale(1);
    opacity: 1;
  }

  nav a.active {
    color: var(--primary) !important;
    text-shadow:
      0 0 10px var(--primary),
      0 0 20px var(--primary),
      0 0 30px var(--primary);
  }

  nav a.active .nav-text {
    text-shadow:
      0 0 10px var(--primary),
      0 0 20px var(--primary),
      0 0 30px var(--primary);
    animation: glitch-text 3s infinite;
  }

  .nav-link {
    color: rgba(255, 255, 255, 0.9);
    text-shadow:
      0 0 5px rgba(255, 255, 255, 0.3),
      0 0 10px rgba(0, 245, 255, 0.2);
  }

  .nav-link:hover {
    color: var(--secondary);
    text-shadow:
      0 0 8px var(--secondary),
      0 0 16px var(--secondary),
      0 0 24px var(--secondary);
    transform: scale(1.05);
  }

  .nav-link:hover .nav-text {
    text-shadow:
      0 0 8px var(--secondary),
      0 0 16px var(--secondary),
      0 0 24px var(--secondary);
  }

  /* 赛博朋克故障效果 */
  @keyframes nav-glitch {
    0%, 100% {
      clip-path: inset(0 0 0 0);
    }
    20% {
      clip-path: inset(0 100% 0 0);
    }
    40% {
      clip-path: inset(0 0 100% 0);
    }
    60% {
      clip-path: inset(100% 0 0 0);
    }
  }

  .cyberpunk-nav::after {
    content: "";
    position: absolute;
    inset: 0;
    background: linear-gradient(
      45deg,
      transparent 30%,
      rgba(252, 238, 9, 0.02) 50%,
      transparent 70%
    );
    animation: scanline 8s linear infinite;
    pointer-events: none;
  }

  @media (max-width: 767px) {
    nav {
      width: 100% !important;
      bottom: 0;
      left: 50%;
      position: fixed;
      border-radius: 1rem 1rem 0 0;
      border-color: var(--border-light);
    }

    nav.scrolling {
      border-radius: 1rem 1rem 0 0;
      background: rgba(10, 10, 10, 0.8);
    }

    body {
      padding-bottom: 70px;
    }
  }
</style>
