---
import AsukaConfig from "~/asuka.config";
import { Icon } from "astro-icon/components";
import { i18n } from "@/i18n/translation";

const navCount = AsukaConfig.navigators.length;
---

<nav class="nav" id="nav">
  <div
    class="relative flex h-[4rem] w-full items-center justify-between overflow-visible lg:h-[4.5rem]"
  >
    <div class="brand after:content-['']">
      <button
        id="menu-switcher"
        type="button"
        class="h-[40px] w-[44px] content-center"
      >
        <Icon
          id="menu-icon-closed"
          size={24}
          name="line-md:close-to-menu-transition"
          class="mx-auto hidden"
        />
        <Icon
          id="menu-icon-opened"
          size={24}
          name="line-md:menu-to-close-transition"
          class="mx-auto hidden"
        />
      </button>
      <a class="title" href="/">
        {AsukaConfig.brandTitle}
      </a>
    </div>
    <a class="brand-lg" href="/">
      <div class="title space-x-2">
        <Icon name="heroicons:home" size={32} />
        <p>{AsukaConfig.brandTitle}</p>
      </div>
    </a>
    <div class="menu">
      {
        AsukaConfig.navigators.map((nav) => (
          <a href={nav.href}>
            <p>{i18n(nav.nameKey)}</p>
          </a>
        ))
      }
    </div>
    <div class="toolbar">
      <div class="lg:hidden">
        <!-- <MobileSearchBar client:only="svelte" /> -->
      </div>
      <div class="hidden lg:block">
        <!-- <SearchBar client:only="svelte" /> -->
      </div>
      <div class="theme">
        <button type="button" id="theme-switcher">
          <Icon
            id="theme-icon-light"
            name="line-md:moon-alt-to-sunny-outline-loop-transition"
            size={24}
            class="hidden"
          />
          <Icon
            id="theme-icon-dark"
            name="line-md:sunny-outline-to-moon-alt-loop-transition"
            size={24}
            class="hidden"
          />
        </button>
      </div>
    </div>
  </div>
  <div id="mobile-menu" class="px-3 transition-all">
    <ul
      id="mobile-menu-nav"
      class="mobile-menu-nav mobile-menu-nav-closed flex flex-col space-y-6 overflow-hidden text-xl font-medium text-[var(--text-color)] transition-all duration-300"
    >
      {
        AsukaConfig.navigators.map((nav) => (
          <li class="mt-1">
            <a href={nav.href} class="mobile-nav-item">
              <div class="flex flex-row items-center space-x-2">
                <span class="text-[var(--primary-color)]">Â·</span>
                <span>{i18n(nav.nameKey)}</span>
              </div>
              <Icon
                name="cuida:caret-right-outline"
                class="text-[var(--text-color-lighten)]"
              />
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<script>
  // Menu toggle functionality
  const menuSwitcher = document.getElementById('menu-switcher');
  const mobileMenu = document.getElementById('mobile-menu');
  let isMenuOpen = false;

  menuSwitcher?.addEventListener('click', () => {
    isMenuOpen = !isMenuOpen;
    mobileMenu?.classList.toggle('open', isMenuOpen);
    menuSwitcher.classList.toggle('open', isMenuOpen);
  });

  // Search toggle functionality
  const searchToggle = document.getElementById('search-toggle');
  const searchBar = document.getElementById('search-bar');
  const searchInput = document.getElementById('search-input');

  searchToggle?.addEventListener('click', () => {
    searchBar?.classList.toggle('hidden');
    if (!searchBar?.classList.contains('hidden')) {
      searchInput?.focus();
    }
  });

  // Theme toggle functionality
  const themeToggle = document.getElementById('theme-switcher');
  const lightIcon = document.getElementById('theme-icon-light');
  const darkIcon = document.getElementById('theme-icon-dark');

  function updateThemeIcons() {
    const isDark = document.documentElement.classList.contains('dark');
    lightIcon?.classList.toggle('hidden', isDark);
    darkIcon?.classList.toggle('hidden', !isDark);
  }

  function setTheme(theme: string) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    localStorage.setItem('theme', theme);
    updateThemeIcons();
  }

  themeToggle?.addEventListener('click', () => {
    const isDark = document.documentElement.classList.contains('dark');
    setTheme(isDark ? 'light' : 'dark');
  });

  // Initialize theme
  const savedTheme = localStorage.getItem('theme') || 
    (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
  setTheme(savedTheme);
</script>

<style define:vars={{ navCount }}>
 
  @reference "tailwindcss";
  .nav {
    @apply fixed left-1/2 z-50 flex w-full max-w-6xl flex-col rounded-b-xl bg-white/80 backdrop-blur-md transition-all duration-300;
    @apply dark:bg-gray-900/80;
    transform: translateX(-50%);
    animation: slideDown 0.3s ease-out;
  }

  .nav-container {
    @apply relative flex h-16 w-full items-center justify-between px-4 lg:px-6;
  }

  /* Mobile Brand */
  .brand {
    @apply flex w-full items-center justify-between lg:hidden;
  }

  .brand .title {
    @apply absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-xl font-bold text-blue-600 transition-colors;
    @apply hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300;
  }

  .menu-toggle {
    @apply flex h-10 w-10 flex-col items-center justify-center space-y-1 rounded-lg transition-colors;
    @apply hover:bg-gray-100 dark:hover:bg-gray-800;
  }

  .hamburger {
    @apply h-0.5 w-6 bg-gray-600 transition-all duration-300;
    @apply dark:bg-gray-300;
  }

  .menu-toggle.open .hamburger:nth-child(1) {
    transform: translateY(6px) rotate(45deg);
  }

  .menu-toggle.open .hamburger:nth-child(2) {
    opacity: 0;
  }

  .menu-toggle.open .hamburger:nth-child(3) {
    transform: translateY(-6px) rotate(-45deg);
  }

  /* Desktop Brand */
  .brand-lg {
    @apply hidden items-center space-x-3 rounded-lg px-4 py-2 transition-colors lg:flex;
    @apply hover:bg-gray-100 dark:hover:bg-gray-800;
  }

  .brand-lg .title {
    @apply flex items-center space-x-2 text-xl font-bold text-blue-600;
    @apply dark:text-blue-400;
  }

  .brand-icon {
    @apply text-2xl;
  }

  /* Desktop Menu */
  .menu {
    @apply absolute left-1/2 hidden -translate-x-1/2 items-center space-x-1 lg:flex;
  }

  .menu a {
    @apply rounded-lg px-4 py-2 font-medium text-gray-700 transition-colors;
    @apply hover:bg-gray-100 hover:text-blue-600;
    @apply dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-blue-400;
  }

  /* Toolbar */
  .toolbar {
    @apply flex items-center space-x-2;
  }

  .search-container {
    @apply relative;
  }

  .search-button, .theme-toggle {
    @apply flex h-10 w-10 items-center justify-center rounded-lg text-gray-600 transition-colors;
    @apply hover:bg-gray-100 hover:text-blue-600;
    @apply dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-blue-400;
  }

  .search-bar {
    @apply absolute right-0 top-12 w-64 rounded-lg bg-white p-2 shadow-lg;
    @apply dark:bg-gray-800;
  }

  .search-input {
    @apply w-full rounded-md border border-gray-300 px-3 py-2 text-sm;
    @apply focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500;
    @apply dark:border-gray-600 dark:bg-gray-700 dark:text-white;
  }

  /* Mobile Menu */
  .mobile-menu {
    @apply max-h-0 overflow-hidden transition-all duration-300 lg:hidden;
  }

  .mobile-menu.open {
    max-height: calc(var(--navCount) * 3.5rem + 1rem);
  }

  .mobile-menu-nav {
    @apply flex flex-col space-y-1 px-4 pb-4;
  }

  .mobile-nav-item {
    @apply flex items-center justify-between rounded-lg px-4 py-3 text-gray-700 transition-colors;
    @apply hover:bg-gray-100 hover:text-blue-600;
    @apply dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-blue-400;
  }

  .nav-item-content {
    @apply flex items-center space-x-3;
  }

  .nav-bullet {
    @apply text-blue-600 dark:text-blue-400;
  }

  @keyframes slideDown {
    from {
      transform: translateX(-50%) translateY(-100%);
      opacity: 0;
    }
    to {
      transform: translateX(-50%) translateY(0);
      opacity: 1;
    }
  }
</style> 