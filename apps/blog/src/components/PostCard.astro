---
import { getTranslation } from "@/i18n/translation";
import type { Locale } from "@/i18n/translation";
import I18nKeys from "@/i18n/keys";
import AsukaConfig from "~/asuka.config";

export interface Props {
  id: string;
  title: string;
  description: string;
  published: Date;
  tags?: string[];
  category?: string;
  cover?: string;
  author?: string;
  readingTime?: string;
  slug: string;
}

const {
  id,
  title,
  description,
  published,
  tags = [],
  category,
  cover,
  author = AsukaConfig.username,
  readingTime,
  slug
} = Astro.props;

const locale = AsukaConfig.locale as Locale;
const postUrl = `/posts/${slug}`;
const publishedDate = new Date(published).toLocaleDateString(locale === 'zh-CN' ? 'zh-CN' : 'en-US');
---

<article class="post-card onload-animation-fade-in">
  <!-- Cover Image -->
  {cover && (
    <div class="post-cover">
      <a href={postUrl}>
        <img src={cover} alt={title} class="cover-image" loading="lazy" />
      </a>
      <div class="cover-overlay">
        <div class="cover-date">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
          <span>{publishedDate}</span>
        </div>
        {category && (
          <div class="cover-category">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M20.59 13.41l-7.17 7.17a2 2 0 01-2.83 0L2 12V2h10l8.59 8.59a2 2 0 010 2.82z"></path>
              <line x1="7" y1="7" x2="7.01" y2="7"></line>
            </svg>
            <span>{category}</span>
          </div>
        )}
      </div>
    </div>
  )}

  <!-- Card Content -->
  <div class="post-content">
    <!-- Title -->
    <div class="post-header">
      <a href={postUrl} class="post-title">
        <h3>{title}</h3>
        <svg class="title-arrow" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="m9 18 6-6-6-6"></path>
        </svg>
      </a>
    </div>

    <!-- Description -->
    <p class="post-description">{description}</p>

    <!-- Tags -->
    {tags.length > 0 && (
      <div class="post-tags">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20.59 13.41l-7.17 7.17a2 2 0 01-2.83 0L2 12V2h10l8.59 8.59a2 2 0 010 2.82z"></path>
          <line x1="7" y1="7" x2="7.01" y2="7"></line>
        </svg>
        <div class="tags-list">
          {tags.slice(0, 3).map((tag, index) => (
            <Fragment>
              {index > 0 && <span class="tag-separator">/</span>}
              <a href={`/tags/${tag.toLowerCase().replace(/\s+/g, '-')}`} class="tag-link">
                {tag}
              </a>
            </Fragment>
          ))}
          {tags.length > 3 && <span class="tag-more">...</span>}
        </div>
      </div>
    )}

    <!-- Meta Information -->
    <div class="post-meta">
      <div class="meta-item">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
          <circle cx="12" cy="7" r="4"></circle>
        </svg>
        <span>{author}</span>
      </div>
      
      {!cover && (
        <div class="meta-item">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
          <span>{publishedDate}</span>
        </div>
      )}

      {readingTime && (
        <div class="meta-item">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="10"></circle>
            <polyline points="12,6 12,12 16,14"></polyline>
          </svg>
          <span>{readingTime}</span>
        </div>
      )}
    </div>

    <!-- Read More -->
    <div class="post-footer">
      <a href={postUrl} class="read-more-btn">
        <span>{getTranslation(locale)}</span>
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="m9 18 6-6-6-6"></path>
        </svg>
      </a>
    </div>
  </div>
</article>

<style>
  @reference "tailwindcss";

  .post-card {
    @apply relative flex flex-col overflow-hidden rounded-xl bg-white shadow-sm transition-all duration-300;
    @apply hover:shadow-lg hover:-translate-y-1;
    @apply dark:bg-gray-800 dark:shadow-gray-900/20;
    break-inside: avoid;
    margin-bottom: 1.5rem;
  }

  /* Cover Image */
  .post-cover {
    @apply relative overflow-hidden;
  }

  .cover-image {
    @apply h-48 w-full object-cover transition-transform duration-300;
  }

  .post-card:hover .cover-image {
    @apply scale-105;
  }

  .cover-overlay {
    @apply absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent;
    @apply flex items-end justify-between p-4;
  }

  .cover-date,
  .cover-category {
    @apply flex items-center space-x-2 rounded-lg bg-black/30 px-3 py-1.5 text-sm text-white backdrop-blur-sm;
  }

  .cover-category {
    @apply max-w-32 truncate;
  }

  /* Content */
  .post-content {
    @apply flex flex-col space-y-4 p-6;
  }

  .post-header {
    @apply flex items-start justify-between;
  }

  .post-title {
    @apply flex items-start space-x-2 flex-1;
  }

  .post-title h3 {
    @apply text-lg font-semibold text-gray-900 transition-colors;
    @apply dark:text-white;
    line-height: 1.4;
  }

  .post-title:hover h3 {
    @apply text-blue-600 dark:text-blue-400;
  }

  .title-arrow {
    @apply mt-1 text-gray-400 transition-all;
    @apply dark:text-gray-600;
    flex-shrink: 0;
  }

  .post-title:hover .title-arrow {
    @apply text-blue-600 translate-x-1 dark:text-blue-400;
  }

  .post-description {
    @apply text-sm text-gray-600 line-clamp-3;
    @apply dark:text-gray-300;
  }

  /* Tags */
  .post-tags {
    @apply flex items-center space-x-2 text-sm;
  }

  .post-tags svg {
    @apply text-gray-400 dark:text-gray-600;
  }

  .tags-list {
    @apply flex items-center space-x-1;
  }

  .tag-link {
    @apply rounded-md px-2 py-1 text-gray-600 transition-colors;
    @apply hover:bg-blue-50 hover:text-blue-600;
    @apply dark:text-gray-400 dark:hover:bg-blue-900/30 dark:hover:text-blue-400;
  }

  .tag-separator {
    @apply text-gray-400 dark:text-gray-600;
  }

  .tag-more {
    @apply text-gray-400 dark:text-gray-600;
  }

  /* Meta */
  .post-meta {
    @apply flex flex-wrap gap-4 text-sm text-gray-500;
    @apply dark:text-gray-400;
  }

  .meta-item {
    @apply flex items-center space-x-1.5;
  }

  .meta-item svg {
    @apply h-4 w-4;
  }

  /* Footer */
  .post-footer {
    @apply pt-2;
  }

  .read-more-btn {
    @apply flex items-center space-x-2 text-sm font-medium text-blue-600 transition-colors;
    @apply hover:text-blue-700;
    @apply dark:text-blue-400 dark:hover:text-blue-300;
  }

  .read-more-btn:hover svg {
    @apply translate-x-1;
  }

  .read-more-btn svg {
    @apply transition-transform;
  }

  /* No cover variant */
  .post-card:not(:has(.post-cover)) {
    @apply border border-gray-200 dark:border-gray-700;
  }
</style> 