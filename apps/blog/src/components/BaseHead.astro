---
import "@/styles/global.css";
import AsukaConfig from "~/asuka.config";

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{AsukaConfig.title}</title>
<meta name="title" content={AsukaConfig.title} />
<meta name="description" content={AsukaConfig.description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={AsukaConfig.title} />
<meta property="og:description" content={AsukaConfig.description} />
<!-- <meta property="og:image" content={new URL(image, Astro.url)} /> -->

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={AsukaConfig.title} />
<meta property="twitter:description" content={AsukaConfig.description} />
<!-- <meta property="twitter:image" content={new URL(image, Astro.url)} /> -->

<!-- RSS AutoDiscovery -->
<link
  rel="alternate"
  type="application/rss+xml"
  title={AsukaConfig.title}
  href={new URL("rss.xml", Astro.site)}
/>

<!-- SiteMap -->
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- CSS -->
<link
  rel="stylesheet"
  href="https://fastly.jsdelivr.net/npm/katex/dist/katex.min.css"
/>
<!-- Fonts -->
<link rel="preconnect" href="https://fonts.bunny.net" />
<link
  href="https://fonts.bunny.net/css?family=noto-sans-sc:100,200,300,400,500,600,700,800,900|raleway:500,700"
  rel="stylesheet"
/>

<!-- Lazy Loading Script -->
<script>
  // 使用原生 Intersection Observer 实现延迟加载
  function initLazyLoading() {
    // 检查浏览器是否支持 Intersection Observer
    if (!('IntersectionObserver' in window)) {
      // 如果不支持，直接加载所有图片
      loadAllImages();
      return;
    }

    // 创建观察器
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const element = entry.target;

          // 处理背景图片
          const bgImage = element.getAttribute('data-background-image');
          if (bgImage && element instanceof HTMLElement) {
            element.style.backgroundImage = `url(${bgImage})`;
          }

          // 处理 img 元素
          const dataSrc = element.getAttribute('data-src');
          if (dataSrc && element instanceof HTMLImageElement) {
            element.src = dataSrc;
          }

          // 停止观察已加载的元素
          observer.unobserve(element);
        }
      });
    }, {
      rootMargin: '50px' // 提前50px开始加载
    });

    // 观察所有需要延迟加载的元素
    document.querySelectorAll('.lozad').forEach(el => {
      observer.observe(el);
    });
  }

  // 备用方案：直接加载所有图片
  function loadAllImages() {
    document.querySelectorAll('.lozad').forEach(el => {
      const bgImage = el.getAttribute('data-background-image');
      if (bgImage && el instanceof HTMLElement) {
        el.style.backgroundImage = `url(${bgImage})`;
      }

      const dataSrc = el.getAttribute('data-src');
      if (dataSrc && el instanceof HTMLImageElement) {
        el.src = dataSrc;
      }
    });
  }

  // DOM 加载完成后初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLazyLoading);
  } else {
    initLazyLoading();
  }

  // 对于 SPA 路由也需要重新初始化
  document.addEventListener('astro:page-load', initLazyLoading);
</script>
