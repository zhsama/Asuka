---
import Base from "./BaseLayout.astro";
import NavBar from "@/components/NavBar.astro";
import Banner from "@/components/Banner.astro";

import AsukaConfig from "~/asuka.config";
import Footer from "@/components/Footer.astro";
import SideBar from "@/components/Sidebar.astro";

export interface Props {
  title?: string;
  subTitle?: string;
  bannerImage?: string;
  slug?: string;
}

const props = Astro.props;
---

<Base>
  <NavBar />

  {
    AsukaConfig.bannerStyle == "LOOP" && (
      <Banner
        title={props.title}
        subTitle={props.subTitle}
        bannerImage={props.bannerImage}
        slug={props.slug}
      />
    )
  }

  <div class="main-container my-4 md:my-10">
    <div class="flex flex-row items-start xl:space-x-4 w-full">
      <div class="side-bar">
        <SideBar />
      </div>
      <div class="transition-leaving w-full space-y-8 min-w-0">
        <main class="content onload-animation">
          <slot />
        </main>
        <Footer />
      </div>
    </div>
  </div>
</Base>

<style>
  @reference "tailwindcss";

  .main-container {
    @apply w-full max-w-full px-4 md:px-0;
    @apply md:min-w-[80%] md:max-w-[80%] lg:min-w-[var(--page-width-lg)] lg:max-w-[var(--page-width-lg)] xl:min-w-[var(--page-width-xl)] xl:max-w-[var(--page-width-xl)];
    @apply md:mx-auto;
    box-sizing: border-box;
    overflow-x: clip;
  }
  
  @media (max-width: 768px) {
    .main-container {
      @apply px-2;
      margin: 0;
      width: 100%;
      max-width: 100vw;
    }
  }

  .side-bar {
    @apply hidden min-w-[248px] xl:block;
    position: sticky;
    align-self: flex-start;
    max-height: calc(100vh - 8rem);
    overflow-y: auto;
    overflow-x: hidden;
  }

  .side-bar > div {
    transition: all 0.3s ease;
  }

  .side-bar::-webkit-scrollbar {
    width: 4px;
  }

  .side-bar::-webkit-scrollbar-track {
    background: transparent;
  }

  .side-bar::-webkit-scrollbar-thumb {
    background: var(--primary-color-transparent);
    border-radius: 2px;
  }

  .side-bar::-webkit-scrollbar-thumb:hover {
    background: var(--primary-color);
  }

  .content {
    @apply w-full xl:w-[calc(var(--page-width-xl)-264px)];
    min-width: 0;
    max-width: 100%;
    box-sizing: border-box;
  }
</style>

<script>
  function throttle(func: Function, limit: number) {
    let inThrottle: boolean;
    return function(this: any, ...args: any[]) {
      if (!inThrottle) {
        func.apply(this, args);
        inThrottle = true;
        setTimeout(() => inThrottle = false, limit);
      }
    }
  }

  function initNavAutoHide() {
    const nav = document.getElementById('nav');
    const banner = document.getElementById('banner');
    
    if (!nav || !banner) return;

    let lastScrollY = window.scrollY;
    let isHidden = false;

    const calculateThreshold = () => {
      return Math.max(banner.offsetHeight - nav.offsetHeight, 0);
    };

    let threshold = calculateThreshold();

    const setNavStyle = (hidden: boolean) => {
      nav.style.transform = `translateX(-50%) translateY(${hidden ? '-100%' : '0'})`;
      nav.style.opacity = hidden ? '0' : '1';
      nav.style.transition = 'transform 0.3s ease-in-out, opacity 0.3s ease-in-out';
      nav.style.willChange = hidden ? 'transform, opacity' : 'auto';
      isHidden = hidden;
    };

    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      const scrollDiff = Math.abs(currentScrollY - lastScrollY);
      const scrollingDown = currentScrollY > lastScrollY;

      if (scrollDiff < 5) return;

      if (currentScrollY > threshold) {
        if (scrollingDown && !isHidden) {
          setNavStyle(true);
        } else if (!scrollingDown && isHidden) {
          setNavStyle(false);
        }
      } else if (isHidden) {
        setNavStyle(false);
      }

      lastScrollY = currentScrollY;
    };

    const throttledHandleScroll = throttle(handleScroll, 16);
    window.addEventListener('scroll', throttledHandleScroll, { passive: true });

    const handleResize = throttle(() => {
      threshold = calculateThreshold();
    }, 100);
    window.addEventListener('resize', handleResize);

    setTimeout(() => {
      nav.style.animation = 'none';
      nav.style.animationFillMode = 'none';
      setNavStyle(false);
    }, 350);

    const cleanup = () => {
      window.removeEventListener('scroll', throttledHandleScroll);
      window.removeEventListener('resize', handleResize);
    };

    document.addEventListener('astro:before-preparation', cleanup);
    window.addEventListener('beforeunload', cleanup);
  }

  document.addEventListener('DOMContentLoaded', initNavAutoHide);
  document.addEventListener('astro:page-load', initNavAutoHide);
</script>
