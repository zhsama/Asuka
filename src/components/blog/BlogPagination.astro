---
import type { PaginationInfo } from '@/types/blog';

interface Props {
  pagination: PaginationInfo;
  baseUrl: string;
}

const { pagination, baseUrl } = Astro.props;

// 生成页码数组
function generatePageNumbers(current: number, total: number): (number | string)[] {
  const pages: (number | string)[] = [];
  const showPages = 5; // 显示的页码数量
  
  if (total <= showPages) {
    // 如果总页数小于等于显示页数，显示所有页码
    for (let i = 1; i <= total; i++) {
      pages.push(i);
    }
  } else {
    // 复杂的分页逻辑
    if (current <= 3) {
      // 当前页在前面
      for (let i = 1; i <= 4; i++) {
        pages.push(i);
      }
      pages.push('...');
      pages.push(total);
    } else if (current >= total - 2) {
      // 当前页在后面
      pages.push(1);
      pages.push('...');
      for (let i = total - 3; i <= total; i++) {
        pages.push(i);
      }
    } else {
      // 当前页在中间
      pages.push(1);
      pages.push('...');
      for (let i = current - 1; i <= current + 1; i++) {
        pages.push(i);
      }
      pages.push('...');
      pages.push(total);
    }
  }
  
  return pages;
}

const pageNumbers = generatePageNumbers(pagination.currentPage, pagination.totalPages);

// 构建 URL
function buildUrl(page: number): string {
  if (page === 1) {
    return baseUrl;
  }
  return `${baseUrl}${baseUrl.includes('?') ? '&' : '?'}page=${page}`;
}
---

{pagination.totalPages > 1 && (
  <nav class="pagination-container" aria-label="博客分页导航">
    <div class="pagination-info">
      <span class="pagination-text">
        第 {pagination.currentPage} 页，共 {pagination.totalPages} 页
        （共 {pagination.totalPosts} 篇文章）
      </span>
    </div>
    
    <div class="pagination-controls">
      <!-- 上一页 -->
      {pagination.hasPrev ? (
        <a 
          href={buildUrl(pagination.currentPage - 1)}
          class="pagination-nav"
          aria-label="上一页"
        >
          <svg class="pagination-nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
          </svg>
          上一页
        </a>
      ) : (
        <span class="pagination-nav disabled">
          <svg class="pagination-nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
          </svg>
          上一页
        </span>
      )}
      
      <!-- 页码 -->
      <div class="pagination-pages">
        {pageNumbers.map(page => (
          typeof page === 'number' ? (
            page === pagination.currentPage ? (
              <span class="pagination-page current" aria-current="page">
                {page}
              </span>
            ) : (
              <a 
                href={buildUrl(page)}
                class="pagination-page"
                aria-label={`第 ${page} 页`}
              >
                {page}
              </a>
            )
          ) : (
            <span class="pagination-ellipsis">{page}</span>
          )
        ))}
      </div>
      
      <!-- 下一页 -->
      {pagination.hasNext ? (
        <a 
          href={buildUrl(pagination.currentPage + 1)}
          class="pagination-nav"
          aria-label="下一页"
        >
          下一页
          <svg class="pagination-nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
          </svg>
        </a>
      ) : (
        <span class="pagination-nav disabled">
          下一页
          <svg class="pagination-nav-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
          </svg>
        </span>
      )}
    </div>
  </nav>
)}

<style>
  @reference "tailwindcss";

  .pagination-container {
    @apply mt-12 space-y-4;
  }

  .pagination-info {
    @apply text-center;
  }

  .pagination-text {
    @apply text-[var(--text-muted)] text-sm;
  }

  .pagination-controls {
    @apply flex items-center justify-center gap-2;
  }

  .pagination-nav {
    @apply flex items-center gap-2 px-4 py-2 bg-[var(--component-bg)] border border-[var(--border-light)] rounded-lg text-[var(--text-secondary)] hover:text-[var(--primary)] hover:border-[var(--primary)] transition-all duration-200;
    text-decoration: none;
  }

  .pagination-nav.disabled {
    @apply opacity-50 cursor-not-allowed hover:text-[var(--text-secondary)] hover:border-[var(--border-light)];
  }

  .pagination-nav-icon {
    @apply w-4 h-4;
  }

  .pagination-pages {
    @apply flex items-center gap-1 mx-4;
  }

  .pagination-page {
    @apply w-10 h-10 flex items-center justify-center rounded-lg text-[var(--text-secondary)] hover:text-[var(--primary)] hover:bg-[var(--primary)]/10 transition-all duration-200;
    text-decoration: none;
  }

  .pagination-page.current {
    @apply bg-[var(--primary)] text-black font-bold;
  }

  .pagination-ellipsis {
    @apply w-10 h-10 flex items-center justify-center text-[var(--text-muted)];
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .pagination-controls {
      @apply flex-col gap-4;
    }
    
    .pagination-pages {
      @apply mx-0;
    }
    
    .pagination-nav {
      @apply px-3 py-2 text-sm;
    }
    
    .pagination-page {
      @apply w-8 h-8 text-sm;
    }
  }
</style>